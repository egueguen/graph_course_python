---
title: "Subsetting Columns with Pandas"
author: "Emilie Gueguen"
format: html
---

# Subsetting Columns 

### Import

```{python}
import pandas as pd
```

### Dataset

```{python}
yao = pd.read_csv("yaounde_data.csv")
yao
```
# 1. Selecting columns with square brackets


```{python}
yao[["age","sex"]]
```


```{python}
# this code does not work
# yao["age","sex"]
```


```{python}
yao["age"]
```


```{python}
yao[["age"]]
```

# 2. Storing data subsets


```{python}
yao_subset = yao[["age","sex"]]
yao_subset
```


```{python}
yao_subset = yao_subset[["age"]]
yao_subset
```

## Practice : select columns with []

*Use the [] operators to select the weight_kg and height_cm variables in the yao dataframe. Assign the result to a new dataframe called yao_weight_height.*

**Result:**

```{python}
yao_weight_height = yao[["weight_kg","height_cm"]]
yao_weight_height
```

# 3. Excluding columns with drop()


```{python}
yao.drop(columns=["age"])
```


```{python}
yao.drop(columns=["age", "age_category"])
```

## Practice: Drop columns with .drop()

*From the yao dataframe, remove the columns highest_education and consultation.*

*Assign the result to a new dataframe yao_no_education_consultation.*

*Print that new dataframe*

**Result:**

```{python}
yao_no_education_consultation = yao.drop(columns=["highest_education","consultation"])
yao_no_education_consultation
```

# 4. Using filter to select columns by regex

Regex : Regular Expression

*Regex Cheatsheets*

```{python}
yao.filter(regex="ig")
```


```{python}
yao.filter(regex="^ig") #Start with Ig
```


```{python}
yao.filter(regex="result$") #Ends with result
```

## Practice: Select columns with regex

*Select all the columns in the yao dataframe that start with "is_".*

*Assign the result to a new dataframe called yao_is_columns.*

**Result:**


```{python}
yao_is_columns = yao.filter(regex="^is_")
yao_is_columns
```

# 5. Change column names with rename


```{python}
yao.rename(columns={"age":"patient_age", "sex":"patient_sex"})
```

## Practice

*Rename the age_category column in the yao dataframe to age_cat.*

*Assign the result to a new dataframe called yao_age_cat.*


```{python}
yao_age_cat = yao.rename(columns={"age_category":"age_cat"})
yao_age_cat
```

# 6. Cleaning messy column names


```{python}
test_df = pd.DataFrame({"good_name": range(3),
"bad name": range(3),
"bad*@name*2":range(3)})
test_df
```

```{python}
test_df.good_name
# Bad names are not accessible through dot syntax
# test_df.bad name
```

```{python}
test_df.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True)
```

```{python}
test_df.columns = test_df.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True)
test_df
```

*Original test_df, we extract the columns (test_df.columns). Then we use the string.replace() methods on the list of columns. In the string.replace(), we use regex (r) to indicate that anything that is not alpha-numeric, to replace with underscore and we assign everything to the original test_df.columns*

## Practice: Clean column name with regex

*Consider the dataframe defined below. Use the str.replace method to clean the column names.*

```{python}
cleaning_practice = pd.DataFrame(
    {"Aloha": range(3), "Bell Chart": range(3),
    "Animals@the zoo": range(3)}
)
cleaning_practice
```

**Result:**

```{python}
#cleaning_practice.columns =  cleaning_practice.columns.str.replace(r"[a-zA-Z0-9]", "_", regex=True) # replace [a-zA-Z0-9]
#cleaning_practice

cleaning_practice.columns =  cleaning_practice.columns.str.replace(r"[^a-zA-Z0-9]", "_", regex=True) 
cleaning_practice
```