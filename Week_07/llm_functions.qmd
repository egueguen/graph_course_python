---
title: "LLM Functions"
author: "Emilie Gueguen"
---


```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
from local_settings import OPENAI_KEY
```

# Setting up the OpenAI Client


```{python}
client = OpenAI(api_key=OPENAI_KEY)
```

# Making our first call


```{python}
response = client.chat.completions.create(
    model = "gpt-4o-mini",
    messages = [{"role":"user",
    "content":"What is the most tourist-friendly in France?"}]
)
```


```{python}
response.choices[0].message.content
```

# Defining a Helper Function

```{python}
def llm_chat(message):
    response = client.chat.completions.create(
        model = "gpt-4o-mini",
        messages = [{"role":"user",
                    "content": message}])
    return response.choices[0].message.content
```


```{python}
llm_chat("Tell me why Python is an awesome language?")
```

## Practice: Get tourist-friendly city in Brazil

Use the `llm_chat` function to ask the model for the most tourist-friendly city in Brazil. Store the response in a variable called `rec_brazil`. Print the response.


```{python}
# Practice code here:
rec_brazil = llm_chat("What is the most tourist-friendly city in Brazil?")
rec_brazil
```

# Variables as Prompt Inputs


```{python}
def city_rec(country):
    prompt =f"What is the most tourist-friendly city in {country}?"
    return llm_chat(prompt)
```


```{python}
city_rec("Nigeria")
```

```{python}
city_rec_vec = np.vectorize(city_rec)
```

```{python}
country_df = pd.DataFrame({"country":["Nigeria", "Chile", "France", "Canada"]})

country_df
```


```{python}
# Using the vectorized function on a dataframe

country_df["city_rec"] = city_rec_vec(country_df["country"])

country_df

#country_df.to_csv
```

## Practice: Get local dishes

Create a function called `get_local_dishes` that takes a country name as input and returns some of the most famous local dishes from that country. Then, vectorize this function and apply it to the `country_df` Dataframe to add a column with local dish recommendations for each country.


```{python}
# Practice code here:
def get_local_dishes(country):
    prompt =f"What is the most famous local dishes from {country}?"
    return llm_chat(prompt)

get_local_dishes = np.vectorize(get_local_dishes)

country_df['local_dishes'] = get_local_dishes(country_df['country'])
```


```{python}
country_df
```

# Automated Summary: Movies Dataset


```{python}
import pandas as pd
import vega_datasets as vd

movies = vd.data.movies().head()  # Using only the first 5 rows to conserve API credits
movies
```

```{python}
movies["full_dict"] = movies.to_dict(orient="records")
movies
```

```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, 
    provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)
```


```{python}
import numpy as np

# Vectorize the function to apply it to the DataFrame
movie_performance_vec = np.vectorize(movie_performance)
```


```{python}
# Example usage
movie_performance("Name: Kene's Movie, Sales: 100,000 USD")
```


```{python}
# Generate summaries for each movie
movies["llm_summary"] = movie_performance_vec(movies["full_dict"])
```


```{python}
# Save the results to a CSV file
movies.to_csv("movies_output.csv", index=False)
```

## Practice: Weather Summary

Using the first 5 rows of the `seattle_weather` dataset from vega_datasets, 
create a function that takes all weather columns for a particular day and 
generates a summary of the weather conditions for that day. 
The function should use the LLM to generate a one-paragraph 
summary for a report, considering the data provided. 
Store the results in a column called weather_summary.

```{python}
import pandas as pd
import vega_datasets as vd
import numpy as np
weather = vd.data.seattle_weather().head()
weather

weather["full_dict"] = weather.to_dict(orient="records")

def weather_conditions(weather_data):
    prompt = f"Considering the following data on this day {weather_data}, provide a one-paragraph summary of the weather conditions for that day."
    return llm_chat(prompt)

weather_conditions_vec = np.vectorize(weather_conditions)

weather["llm_summary"] = weather_conditions_vec(weather["full_dict"])

weather.to_csv("weather_output.csv", index=False)

```