# Imports
```{python}
import pandas as pd
import country_converter as cc
```

```{python}
# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

# One-to-Many Joins
```{python}
people
```

```{python}
test_info_many
```

```{python}
pd.merge(people, test_info_many, on="name", how="left")
```

## Practice: Merging One-to-Many Crop Yields
Run the code below to print the two small dataframes:

```{python}
farm_info
```

```{python}
crop_yields
```

If you use a merge() to join these datasets, how many rows will be in the final dataframe? 

5 rows

Try to figure it out and then perform the join to see if you were right.

```{python}
# Practice code here:
pd.merge(farm_info, crop_yields, on="farm_id", how="left")
```

# Multiple Key Columns

```{python}
traffic_flow
```

```{python}
pollution_levels
```

```{python}
pd.merge(traffic_flow, pollution_levels, on="street_name", how="left")
```

```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

## Practice: Calculate Oil Consumption per Capita

```{python}
# View the datasets
oil_consumption.sort_values(by=["country", "year"])
```

```{python}
tidyr_population.sort_values(by=["country", "year"])
```

Join these datasets using merge() with a left join. Since we want to match both country AND year, youâ€™ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

Which country had the highest per capita oil consumption in 1995?

```{python}
# Practice code here:
oil_pop = pd.merge(oil_consumption, tidyr_population, how="left", on=["country","year"])

oil_pop['consumption_per_capita'] = oil_pop['oil_consump']/oil_pop['population']
```

# Key Mismatches

```{python}
people
```

```{python}
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='left')
```

```{python}
pd.merge(people, test_info_diff, on="name", how="inner")
```

```{python}
test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

```{python}
test_info_diff['name'].unique()
```

```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

## Practice: Inner Join Countries

The following two datasets contain data for India, Indonesia, and the Philippines. However, an inner join of these datasets only returns 1 row.

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

What are the differences between the values in the key columns that would have to be changed before joining the datasets? Pay attention to capitalization and spelling.

Now, fix the mismatched values in the Country column and try the join again.

```{python}
# Practice code here:
asia_population['Country'] = asia_countries['Country']

pd.merge(asia_countries, asia_population)
```

# Key Mismatches : Oil Consumption Example

```{python}
oil_consumption
```

```{python}
tidyr_population
```

```{python}
pd.merge(
    oil_consumption, tidyr_population, on=["country", "year"], how="left"
).sort_values(["country", "year"])
```

```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```

```{python}
missing_in_oil = pop_countries - oil_countries
missing_in_oil
```

# Merging with Country Codes

```{python}
# How to use country_converter
cc.convert("Nigeria", to='ISO3')
```

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
```

```{python}
set(oil_pop_code['country_code'].unique()) - set(tidyr_population['country_code'].unique())
```

```{python}
tidyr_population.query("country.str.contains('Taiwan')")
```

```{python}
tidyr_population.query("country.str.contains('China')")
```

## Practice: Merging Oil Consumption with Geographic Data

Run the code to view the two datasets.

The first, oil_2012, records the oil consumption for the year 2012:

```{python}
oil_2012
```

```{python}
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')


oil_2012_regions = oil_2012.merge(country_regions, on='country_code', how='left')

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby('continent')['oil_consump'].idxmax()
]

max_oil_by_continent[['country', 'continent', 'oil_consump']]
```