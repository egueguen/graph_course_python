
# Imports
```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar

pd.options.mode.copy_on_write = True
```

# Data
```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column
weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```

```{python}
pd.options.display.max_rows = 20
```


```{python}
warnings.filterwarnings(
    "ignore"
)  ## There is a class of warnings that come up when working with categorical data with the current version of pandas that we can ignore
```

# Adding Summary Statistics with transform()

```{python}
weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
```


```{python}
# Does not work
weather['mean_precip'] = weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
weather
```


```{python}
weather['mean_precip_month'] = weather.groupby('month')['precipitation'].transform('mean')
weather
```


```{python}
weather['prep_median_month'] = weather.groupby('month')['precipitation'].transform('median')    
weather
```


```{python}
weather['precip_sum_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```


```{python}
weather["precip_month_prop"] = 100 * weather["precipitation"] / weather["precip_sum_month"]
weather
```

## Practice: Daily Tip Proportions

Using the `tips` dataset, calculate: 1. A new column `daily_total_tips` containing the total tips for each day 2. A new column `tip_proportion` showing what proportion of that dayâ€™s total tips came from each customer

```{python}
# Practice code here:
tips = px.data.tips()
tips['daily_total_tips'] = tips.groupby('day')['tip'].transform('sum')
tips['tip_proportion'] = tips['tip']/tips['daily_total_tips']
tips
```

# Counting Values within Groups Using value_counts()

```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```

```{python}
# Count of weather types
weather["weather"].value_counts()
```

```{python}
# Give the proportion
weather['weather'].value_counts(normalize=True)
```

```{python}
# Counts of weather types per month
weather.groupby('month')['weather'].value_counts()
```

```{python}
weather.groupby('month')['weather'].value_counts().reset_index()
```

## Practice: Count Smokers and Non-Smokers by day

Using the `tips` dataset, count the number of smokers and non-smokers for each day.

```{python}
# Practice code here:
tips = px.data.tips()
tips.groupby('day')['smoker'].value_counts().reset_index()
```

# Cumulative Sums

```{python}
# Cumulative sum of precipitation
weather["precip_cumul"] = weather["precipitation"].cumsum()
weather
```

```{python}
# Cumulative precipitation per month
weather["precip_cumul"] = weather.groupby("month")["precipitation"].cumsum()
weather
```

## Practice: Cumulative Tip Amount By Day

Using the `tips` dataset, compute the cumulative sum of `total_bill` for each `day`, adding a new column `cumul_total_bill_day`. Then add another column `cumul_tip_day` that contains the cumulative sum of `tip` for each `day`.

```{python}
tips = px.data.tips()
tips = tips.sort_values('day')
tips
# Your code here:
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()
tips['cumul_tip_day'] = tips.groupby("day")["tip"].cumsum()
tips
```